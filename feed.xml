<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://blogawesome.com/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
만명 블로그
</title>
<link>
http://blogawesome.com/
</link>
<description>
This blog is awesome
</description>
<lastBuildDate>
Tue, 14 Apr 2015 11:25:26 +0900
</lastBuildDate>
<author>
Manmyung Kim
</author>
<item>
<guid>
http://blogawesome.com/posts/2015-04-12-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-04-12-post.html
</link>
<title>
Cordova와 ClojureScript를 이용하여 안드로이드앱 만들기
</title>
<description>
&lt;p&gt;&lt;a href='http://cordova.apache.org/'&gt;Cordova&lt;/a&gt;는 HTML, JavaScript등의 웹기술로 안드로이드나 아이폰앱을 만들 때 가장 많이 사용하는 프레임워크 중 하나이다. 이것으로 ClojureScript 안드로이드앱을 만들어 보자. 이 글에서는 맥 환경을 기준으로 설명한다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;1.&amp;#95;clojurescript&amp;#95;프로젝트&amp;#95;세팅&quot;&gt;&lt;/a&gt;1. ClojureScript 프로젝트 세팅&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;$ lein new cljs-webapp hello-cordova
$ cd hello-cordova
$ lein cljsbuild once dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;/resources/public/index.html&lt;/code&gt; 을 웹브라우저로 열면 화면에 &lt;code&gt;Hello!&lt;/code&gt; 가 보인다.&lt;/p&gt;&lt;p&gt;글씨가 좀더 크게 보이도록 &lt;code&gt;/src-cljs/hello&amp;#95;cordova/core.cljs&lt;/code&gt; 를 다음처럼 수정.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;ns hello-cordova.core&amp;#41;

&amp;#40;.write js/document &amp;quot;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다시 빌드.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein cljsbuild once dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;웹브라우저에서 다시 보면 &lt;code&gt;Hello!&lt;/code&gt; 가 커졌다.&lt;/p&gt;&lt;p&gt;이 기본적인 웹앱을 안드로이드앱으로 옮길 것이다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;2.&amp;#95;안드로이드&amp;#95;sdk&amp;#95;설치&quot;&gt;&lt;/a&gt;2. 안드로이드 SDK 설치&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/sdk/index.html#Other&quot;&gt;https://developer.android.com/sdk/index.html#Other&lt;/a&gt; 에서 android-sdk_r24.1.2-macosx.zip를 다운받아 압축을 푼다. 이글에서 IDE를 포함하지 않은 SDK Tools Only를 선택한 이유는 간단한 설치를 위해서이다.&lt;/p&gt;&lt;p&gt;각자 안드로이드 SDK를 압축 푼 위치에 따라 밑의 내용을 수정하여 &lt;code&gt;&amp;#126;/.bash&amp;#95;profile&lt;/code&gt;에 추가한다. &lt;/p&gt;&lt;p&gt;&lt;code&gt;export PATH=${PATH}:&amp;#126;/project/android-sdk-macosx/platform-tools:&amp;#126;/project/android-sdk-macosx/tools&lt;/code&gt;&lt;/p&gt;&lt;p&gt;이 변경사항을 현재 터미널 창에 바로 반영한다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ source &amp;#126;/.bash&amp;#95;profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;현재 터미널에서 안드로이드 SDK 사용가능한지 확인.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ android -h
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;3.&amp;#95;cordova&amp;#95;설치&quot;&gt;&lt;/a&gt;3. Cordova 설치&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/&lt;/a&gt; 에서 인스톨 파일 다운받아 설치. 그러면 Node.js와 npm이 설치된다.&lt;/p&gt;&lt;p&gt;Cordova 설치.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ sudo npm install cordova -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cordova 설치되었는지 확인.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cordova -v
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;4.&amp;#95;clojurescript&amp;#95;프로젝트&amp;#95;내부에&amp;#95;cordova&amp;#95;프로젝트&amp;#95;생성&quot;&gt;&lt;/a&gt;4. ClojureScript 프로젝트 내부에 Cordova 프로젝트 생성&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;$ cd hello-cordova
$ cordova create assets com.hello-cordova HelloCordova
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;안드로이드 플랫폼용 파일 추가하려고 하면 다음처럼 에러가 난다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd assets
$ cordova platform add android
...
Error: Please install Android target &amp;quot;android-19&amp;quot;.
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이를 해결하기 위해서는 해당 안드로이드 SDK (지금은 android-19)를 설치해야 한다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Android SDK Manager에서 &lt;code&gt;Tools/Android SDK Build-tools&amp;#40;Rev. 22.0.1&amp;#41;&lt;/code&gt; 과 &lt;code&gt;Android 4.4.2&amp;#40;API 19&amp;#41;&lt;/code&gt;를 선택 후 Install... 버튼을 누른다. 이후 &lt;code&gt;Android SDK License&lt;/code&gt;를 선택 후, &lt;code&gt;Accept License&lt;/code&gt; 을 체크한 후 Install 버튼을 누른다.&lt;/p&gt;&lt;p&gt;다시 안드로이드 플랫폼용 파일 추가&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cordova platform add android
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;5.&amp;#95;디바이스에서&amp;#95;cordova&amp;#95;예제&amp;#95;확인&quot;&gt;&lt;/a&gt;5. 디바이스에서 Cordova 예제 확인&lt;/h2&gt;&lt;p&gt;앞에서 추가한 Cordova 예제를 디바이스에서 확인하기 위해서는 디바이스의 옵션을 변경해야 한다. 각자의 디바이스에서 환경설정 -&gt; 개발자 옵션 -&gt; USB 디버깅 활성화 한다. 그리고 환경설정 -&gt; 보안 -&gt; 알수 없는 소스를 활성화 한다. &lt;/p&gt;&lt;p&gt;이제 다음을 실행하자.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cordova run android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이렇게 하면 앱을 빌드하여 디바이스에 넣은 후 심지어 앱을 자동으로 실행한다.&lt;/p&gt;&lt;p&gt;결과:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2015-04-12-post/img1.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;6.&amp;#95;안드로이드앱으로&amp;#95;변환&quot;&gt;&lt;/a&gt;6. 안드로이드앱으로 변환&lt;/h2&gt;&lt;p&gt;1번에서 만든 웹앱을 안드로이드앱으로 옮기자. 이를 위해서는 &lt;code&gt;/resources&lt;/code&gt;의 내용을 &lt;code&gt;/assets&lt;/code&gt;에 합쳐야 한다. 방법은 다음과 같다.&lt;/p&gt;&lt;p&gt;&lt;code&gt;/assets/www/index.html&lt;/code&gt; 을 다음처럼 수정한다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;telephone=no&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;msapplication-tap-highlight&amp;quot; content=&amp;quot;no&amp;quot; /&amp;gt;
        &amp;lt;!-- WARNING: for iOS 7, remove the width=device-width and height=device-height attributes. See https://issues.apache.org/jira/browse/CB-4323 --&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width, height=device-height, target-densitydpi=device-dpi&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;cordova.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;script src=&amp;quot;js/goog/base.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&amp;quot;js/cljs.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;goog.require&amp;#40;&amp;quot;hello&amp;#95;cordova.core&amp;quot;&amp;#41;;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt; 에서 &lt;code&gt;resources/public&lt;/code&gt;을 모두 &lt;code&gt;assets/www&lt;/code&gt; 으로 바꾼다.&lt;/p&gt;&lt;p&gt;클로저스크립트 다시 빌드.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ lein cljsbuild once dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;/assets/www/index.html&lt;/code&gt; 을 웹브라우저로 열면 이전처럼 &lt;code&gt;Hello!&lt;/code&gt; 가 보인다.&lt;/p&gt;&lt;p&gt;디바이스에서 확인.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$ cd assets
$ cordova run android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;결과:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/img/2015-04-12-post/img2.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;&lt;p&gt;끝!&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;7.&amp;#95;이후&amp;#95;진행&quot;&gt;&lt;/a&gt;7. 이후 진행&lt;/h2&gt;&lt;p&gt;지금까지 기본적인 안드로이드앱을 만들었다. 더 진행하려면 다음을 추천한다.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;iOS 앱 빌드: &lt;a href='http://cordova.apache.org/docs/en/4.0.0/guide&amp;#95;platforms&amp;#95;ios&amp;#95;index.md.html#iOS%20Platform%20Guide'&gt;iOS Platform Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;본격적인 Cordova 개발: &lt;a href='http://www.yes24.com/24/goods/16669540'&gt;하이브리드 앱을 구현하는 기술&lt;/a&gt;&lt;/li&gt;&lt;li&gt;ClojureScript UI 라이브러리: &lt;a href='http://reagent-project.github.io/'&gt;Reagent&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://judithmassa.wordpress.com/2014/06/13/clojurescript-and-phonegap-setup-for-a-mobile-app/'&gt;Clojurescript and Phonegap: Setup for a Mobile App&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://www.yes24.com/24/goods/16669540'&gt;하이브리드 앱을 구현하는 기술&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://cordova.apache.org/docs/en/4.0.0/guide&amp;#95;platforms&amp;#95;android&amp;#95;index.md.html#Android%20Platform%20Guide'&gt;Android Platform Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Sun, 12 Apr 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-03-17-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-03-17-post.html
</link>
<title>
IntelliJ + Cursive 클로저 개발 환경 만들기
</title>
<description>
&lt;p&gt;IntelliJ + Cursive 가 Emacs 보다 초기 세팅은 쉬우면서도 소스 브라우징, 리팩토링, 디버깅 등을 디폴트로 이용할 수 있어 편리하다. 강추.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;intellij&amp;#95;설치&quot;&gt;&lt;/a&gt;IntelliJ 설치&lt;/h2&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download/&quot;&gt;https://www.jetbrains.com/idea/download/&lt;/a&gt; 에서 Community Edition을 다운받아 설치.&lt;h2&gt;&lt;a name=&quot;cursive&amp;#95;플러그인&amp;#95;설치&quot;&gt;&lt;/a&gt;Cursive 플러그인 설치&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://cursiveclojure.com/userguide/&quot;&gt;https://cursiveclojure.com/userguide/&lt;/a&gt; 의 Manually installing Cursive 항목에서 IntelliJ 버전에 맞춘 zip파일 다운받는다. 지금은 &lt;a href=&quot;https://cursiveclojure.com/cursive-14-0.1.50.zip&quot;&gt;https://cursiveclojure.com/cursive-14-0.1.50.zip&lt;/a&gt; 를 받았다. Repositories로 설치하는 방법은 이 포스트를 작성하는 시점에는 작동하지 않았다.&lt;/li&gt;&lt;li&gt;IntelliJ를 실행하여 Configure, Plugins를 선택.&lt;img src=&quot;/img/2015-03-17-post/1.png&quot; alt=&quot;Image 1&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Install Plugin from disk... 로 다운받은 zip 파일 선택하여 설치.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;프로젝트&amp;#95;가져오기&quot;&gt;&lt;/a&gt;프로젝트 가져오기&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;콘솔창에서 &lt;code&gt;lein new default first&lt;/code&gt; 로 새 프로젝트를 만든다. IntelliJ는 프로젝트 단위로 관리되므로 클로저 파일 하나만으로는 실행이 불가능하다.&lt;/li&gt;&lt;li&gt;Import Project를 선택한 후, first 디렉토리의 project.clj를 선택한다.&lt;img src=&quot;/img/2015-03-17-post/2.png&quot; alt=&quot;Image 2&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;계속 Next를 눌러 Import한다. 중간에 project SDK를 선택하는 곳에서 자신의 JDK를 선택한다. 만약 컴퓨터에 JDK가 없으면 설치해야 한다.&lt;img src=&quot;/img/2015-03-17-post/3.png&quot; alt=&quot;Image 3&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;환경&amp;#95;세팅&quot;&gt;&lt;/a&gt;환경 세팅&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;오른쪽 아래 &lt;code&gt;Structural: On&lt;/code&gt; 클릭하여 &lt;code&gt;Structural: Off&lt;/code&gt; 로 바꾼다. On 으로 되어 있으면 소스 편집이 불편하다.&lt;img src=&quot;/img/2015-03-17-post/4.png&quot; alt=&quot;Image 4&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;View에서 Toolbar와 Tool Buttons를 선택하여 모두 보이도록 한다.&lt;/li&gt;&lt;li&gt;Run-&gt;Edit Configurations... 선택. 왼쪽 위 + 버튼 누른다. Clojure REPL -&gt; Local 선택한다. OK 버튼 눌러 Clojure REPL 만든다. 그러면 다음처럼 실행할 수 있는 버튼이 생긴다.&lt;img src=&quot;/img/2015-03-17-post/5.png&quot; alt=&quot;Image 5&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;REPL에 단축키가 설정되어 있어야 편리하다.&lt;ul&gt;&lt;li&gt;Setting-&gt;Appearance &amp; Behavior-&gt;KeyMap을 연다.&lt;/li&gt;&lt;li&gt;search box에 REPL을 쳐서 넣는다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Load file in REPL&lt;/code&gt; 에 &lt;code&gt;Alt + L&lt;/code&gt; (맥은 &lt;code&gt;Command + L&lt;/code&gt;) 단축키 세팅한다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Run form before cursor in REPL&lt;/code&gt; 에 &lt;code&gt;Alt + J&lt;/code&gt; (맥은 &lt;code&gt;Command + J&lt;/code&gt;) 단축키 세팅한다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Run top form in REPL&lt;/code&gt; 에 &lt;code&gt;Alt + K&lt;/code&gt; (맥은 &lt;code&gt;Command + K&lt;/code&gt;) 단축키 세팅한다.&lt;img src=&quot;/img/2015-03-17-post/6.png&quot; alt=&quot;Image 6&quot; /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;실행&quot;&gt;&lt;/a&gt;실행&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;벌레모양의 Debug 버튼 눌러 REPL 실행한다.&lt;/li&gt;&lt;li&gt;REPL 입력창에 1 치고 Enter를 눌러 REPL이 작동함을 확인한다.&lt;img src=&quot;/img/2015-03-17-post/7.png&quot; alt=&quot;Image 7&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;프로젝트 창에서 core.clj를 선택하여 연다.&lt;img src=&quot;/img/2015-03-17-post/8.png&quot; alt=&quot;Image 8&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;#40;ns first.core&amp;#41;&lt;/code&gt; 뒤로 커서를 옮긴 후 &lt;code&gt;Alt + J&lt;/code&gt; (맥은 &lt;code&gt;Command + J&lt;/code&gt;)를 눌러 평가한다. &lt;code&gt;&amp;#40;defn foo ...&amp;#41;&lt;/code&gt; 뒤로 커서를 옮긴 후 &lt;code&gt;Alt + J&lt;/code&gt; (맥은 &lt;code&gt;Command + J&lt;/code&gt;)를 눌러 평가한다.&lt;img src=&quot;/img/2015-03-17-post/9.png&quot; alt=&quot;Image 9&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;#40;foo &amp;quot;Cursive&amp;quot;&amp;#41;&lt;/code&gt;를 친 후 &lt;code&gt;Alt + J&lt;/code&gt; (맥은 &lt;code&gt;Command + J&lt;/code&gt;)를 눌러 평가한다. 그러면 REPL 창에 &lt;code&gt;Cursive Hello, World!&lt;/code&gt;가 찍히는 것을 확인한다. 끝!&lt;img src=&quot;/img/2015-03-17-post/10.png&quot; alt=&quot;Image 10&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;추가&amp;#95;환경&amp;#95;세팅&quot;&gt;&lt;/a&gt;추가 환경 세팅&lt;/h2&gt;필수는 아니지만 해두면 편리한 것들.&lt;ul&gt;&lt;li&gt;Tab키를 누를 때 indent가 자동으로 된다. 이를 위해서는 &lt;a href=&quot;https://cursiveclojure.com/userguide/&quot;&gt;https://cursiveclojure.com/userguide/&lt;/a&gt; 의 내용대로 따라한다.&lt;ul&gt;&lt;li&gt;Settings-&gt;Appearance &amp; Behavior-&gt;KeyMap을 연다.&lt;/li&gt;&lt;li&gt;search box에 tab을 쳐서 넣는다. 그러면 &lt;code&gt;Tab&lt;/code&gt;과 &lt;code&gt;Emacs Tab&lt;/code&gt; 옵션이 나온다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Tab&lt;/code&gt;을 더블클릭한 후 Remove Tab을 선택한다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Emacs Tab&lt;/code&gt;을 더블클릭한 후 Add Keyboard Shortcut을 선택한다.&lt;/li&gt;&lt;li&gt;Tab키를 눌러 First Stroke에 Tab이 세팅되도록 한 후 OK를 누른다.&lt;/li&gt;&lt;li&gt;Warning 창이 나오면 Leave를 선택한다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;a name=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://cursiveclojure.com/userguide/&quot;&gt;https://cursiveclojure.com/userguide/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://aquua.tistory.com/416&quot;&gt;http://aquua.tistory.com/416&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Tue, 17 Mar 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-01-16-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-01-16-post.html
</link>
<title>
블로그 엔진 교체
</title>
<description>
&lt;p&gt;블로그 엔진을 Jekyll에서 Cryogen으로 바꿨다. 클로저로 만들어져 있어서 공부하는데 좋기 때문이다. 디자인 구현이 부트스트랩인 것도 마음에 들었다. 또한 'Web Development with Clojure' 책 저자가 바꿨다는 &lt;a href='http://yogthos.net/posts/2014-11-26-Moving-to-Cryogen.html'&gt;소식&lt;/a&gt;을 듣고 뽐뿌. &lt;/p&gt;&lt;p&gt;배포 서버로 Github Pages를 사용한다면 설치방법은 이렇다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;github&amp;#95;pages만들기&quot;&gt;&lt;/a&gt;Github Pages만들기&lt;/h2&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;https://pages.github.com/&lt;/a&gt; 에서 1,2번만 따라함.&lt;p&gt;&lt;code&gt;git clone https://github.com/아이디/아이디.github.io.git&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;로컬에&amp;#95;cryogen&amp;#95;설치&quot;&gt;&lt;/a&gt;로컬에 Cryogen 설치&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;lein new cryogen 아이디.github.io --force &amp;#40;참고: 이미 있는 directory이므로 --force 사용&amp;#41;
cd 아이디.github.io
lein ring server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 에서 볼 수 있다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;글&amp;#95;쓰기&quot;&gt;&lt;/a&gt;글 쓰기&lt;/h2&gt;&lt;code&gt;resources/templates/md/posts&lt;/code&gt; 디렉토리의 md 파일들을 참고하여 새로운 md 파일 추가.&lt;h2&gt;&lt;a name=&quot;github&amp;#95;pages에&amp;#95;배포&quot;&gt;&lt;/a&gt;Github Pages에 배포&lt;/h2&gt;&lt;code&gt;templates/config.edn&lt;/code&gt; 에서 &lt;code&gt;:blog-prefix&lt;/code&gt;를 &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; 로 세팅.&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;에 &lt;code&gt;/resources/public/&lt;/code&gt; 추가.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd 아이디.github.io
cp -r resources/public/&amp;#42; .
git add --all .
git commit -m '블라블라'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그러면 &lt;code&gt;http://아이디.github.io/&lt;/code&gt; 에서 볼 수 있다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;참고&quot;&gt;&lt;/a&gt;참고&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://cryogenweb.org/docs/getting-started.html&quot;&gt;http://cryogenweb.org/docs/getting-started.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cryogenweb.org/docs/writing-posts.html&quot;&gt;http://cryogenweb.org/docs/writing-posts.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://cryogenweb.org/docs/deploying-to-github-pages.html&quot;&gt;http://cryogenweb.org/docs/deploying-to-github-pages.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
</description>
<pubDate>
Fri, 16 Jan 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-01-15-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-01-15-post.html
</link>
<title>
Cordova로 만드는 안드로이드 앱에서 스플래시 화면 구현
</title>
<description>
&lt;p&gt;Cordova를 이용하여 만들고 있는 안드로이드 앱의 초기 로딩시간이 5초 정도다. 5초 동안 검은 화면으로 나오면 사용자 입장에서는 혼동이 된다. 그래서 초기 화면인 스플래시 화면이 필요하게 되었다. 이렇게 시작된 일이 다양한 문제 때문에 하루종일 걸렸다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;스플래시&amp;#95;화면&amp;#95;띄우기&quot;&gt;&lt;/a&gt;스플래시 화면 띄우기&lt;/h2&gt;Cordova 공식 페이지의 &lt;a href='http://cordova.apache.org/docs/en/4.0.0/config&amp;#95;ref&amp;#95;images.md.html#Icons%20and%20Splash%20Screens'&gt;이곳&lt;/a&gt;에 스플래시 화면 만드는 방법이 나와 있다. 그러나 빠진 내용이 있어서 몇 시간 삽질. 빠진 내용은 이것이다.&lt;p&gt;&lt;code&gt;&amp;lt;preference name=&amp;quot;SplashScreen&amp;quot; value=&amp;quot;screen&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;즉 config.xml 파일에 추가할 부분은 위 문장을 포함하여 다음과 같다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;platform name=&amp;quot;android&amp;quot;&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-land-hdpi.png&amp;quot; density=&amp;quot;land-hdpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-land-ldpi.png&amp;quot; density=&amp;quot;land-ldpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-land-mdpi.png&amp;quot; density=&amp;quot;land-mdpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-land-xhdpi.png&amp;quot; density=&amp;quot;land-xhdpi&amp;quot;/&amp;gt;

    &amp;lt;splash src=&amp;quot;res/splash-port-hdpi.png&amp;quot; density=&amp;quot;port-hdpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-port-ldpi.png&amp;quot; density=&amp;quot;port-ldpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-port-mdpi.png&amp;quot; density=&amp;quot;port-mdpi&amp;quot;/&amp;gt;
    &amp;lt;splash src=&amp;quot;res/splash-port-xhdpi.png&amp;quot; density=&amp;quot;port-xhdpi&amp;quot;/&amp;gt;
&amp;lt;/platform&amp;gt;

&amp;lt;preference name=&amp;quot;SplashScreen&amp;quot; value=&amp;quot;screen&amp;quot;/&amp;gt;
&amp;lt;preference name=&amp;quot;SplashScreenDelay&amp;quot; value=&amp;quot;20000&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 위 src 패스의 png 파일들도 추가해 준다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;플러그인&amp;#95;추가&quot;&gt;&lt;/a&gt;플러그인 추가&lt;/h2&gt;위의 설정만으로는 스플래시 화면이 정해진 20초 동안 나오고 사라진다. 프로그램적으로 메인 로직이 시작하는 시점에 맞춰 스플래시 화면을 없애기 위해서는 플러그인이 필요하다. 플러그인은 이 &lt;a href='https://github.com/apache/cordova-plugin-splashscreen/blob/master/doc/index.md'&gt;문서&lt;/a&gt;에 설명되어 있다. 그러나 여기에도 빠진 내용이 있어서 헤맸다.&lt;p&gt;문서대로 따라하고 추가로 html에 다음 코드를 넣는다.&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;plugins/org.apache.cordova.splashscreen/www/splashscreen.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;여기서 src 패스는 각자에 맞게 수정.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;플러그인&amp;#95;사용&quot;&gt;&lt;/a&gt;플러그인 사용&lt;/h2&gt;위 &lt;a href='https://github.com/apache/cordova-plugin-splashscreen/blob/master/doc/index.md'&gt;문서&lt;/a&gt;에 나온대로 자바스크립트 코드에&lt;p&gt;&lt;code&gt;navigator.splashscreen.hide&amp;#40;&amp;#41;;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;를 추가했지만 스플래시 화면이 안 사라지는 경우도 많았다. 원인은 아마도 splashscreen.js 의 로딩 시점 문제인 거 같다. 그래서 device ready 상태 이후에 위 코드 호출하기로 했다. 우리 회사에서 사용한 코드는 이렇다.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;document.addEventListener&amp;#40;&amp;quot;deviceready&amp;quot;, onDeviceReady, false&amp;#41;;

function onDeviceReady&amp;#40;&amp;#41; {
  블라블라
  navigator.splashscreen.hide&amp;#40;&amp;#41;;
  블라블라
}
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Thu, 15 Jan 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-01-11-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-01-11-post.html
</link>
<title>
4clojure 다시 풀기
</title>
<description>
 &lt;p&gt;Clojure를 처음 시작할 때 4clojure는 좋은 공부 방법 중 하나이다. 이유는 이 &lt;a href='http://clojure.or.kr/wiki/doku.php?id=lecture:4clojure:4clojure%EA%B0%80&amp;#95;clojure&amp;#95;%EA%B3%B5%EB%B6%80%EC%97%90&amp;#95;%EC%A2%8B%EC%9D%80&amp;#95;%EC%9D%B4%EC%9C%A0'&gt;링크&lt;/a&gt;에 잘 설명되어 있다.	실제 문제를 풀다 보니 여러 클로저 문법 중에서도 자주 쓰이는 것 위주로 효과적으로 익힐 수 있다.&lt;/p&gt;&lt;p&gt;4clojure에는 4단계가 있다. Elementary, Easy, Medium, Hard. 몇달 전에 클로저를 시작하면서 Easy까지 풀었었다. 최근 4clojure를 다시 보려니 두 가지 선택이 있었다. 첫째, Medium부터 풀기. 둘째, Elementary, Easy 복습하기. 이전에 푸는 것에만 급급하여 깊이있게 정리하지 못했다는 판단으로 복습을 하기로 했다.&lt;/p&gt;&lt;p&gt;다시 풀어보는 선택이 옳았다. 두번째 보니 다른 사람의 풀이가 눈에 들어온다. maximental, chouser, daowen 이 세 사람이 특히 좋았다. 혼자 풀어서는 생각하지 못할 클로저 또는 함수형 프로그래밍의 풀이방법을 체득할 수 있었다. 그리고 풀이에 대한 생각을 메모로 적어두다 보니 뒤의 문제를 풀때 앞의 문제가 도움이 되는 경우가 많았다. &lt;/p&gt;&lt;p&gt;고등학교 때 생각이 났다. 난 실력정석은 안 풀고, 기본정석의 예제와 유제만 반복해서 풀었다. 이 방법이 상대적으로 적은 시간으로 기본 개념을 튼튼히 하는데 도움이 되었다. 고시공부를 할때 2독, 3독 하는 이유도 이런 효율성 때문일 것이다. &lt;/p&gt;&lt;p&gt;문제풀이는 &lt;a href='https://github.com/manmyung/study-4clojure/tree/master/src/study&amp;#95;4clojure'&gt;https://github.com/manmyung/study-4clojure/tree/master/src/study&amp;#95;4clojure&lt;/a&gt; 에 모아져 있다. 문제를 푼 순서는 &lt;a href='https://github.com/manmyung/study-4clojure/blob/master/log.md'&gt;https://github.com/manmyung/study-4clojure/blob/master/log.md&lt;/a&gt; 이다.&lt;/p&gt;
</description>
<pubDate>
Sun, 11 Jan 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
<item>
<guid>
http://blogawesome.com/posts/2015-01-04-post.html
</guid>
<link>
http://blogawesome.com/posts/2015-01-04-post.html
</link>
<title>
Github Pages와 Jekyll를 이용하여 블로그 만들기
</title>
<description>
&lt;h2&gt;&lt;a name=&quot;github&amp;#95;repository&amp;#95;만들기&quot;&gt;&lt;/a&gt;Github repository 만들기&lt;/h2&gt;https://pages.github.com/ 에서 1,2번만 따라한다.&lt;h2&gt;&lt;a name=&quot;jekyll&amp;#95;설치&quot;&gt;&lt;/a&gt;Jekyll 설치&lt;/h2&gt;https://help.github.com/articles/using-jekyll-with-pages/ 에서 installing-jekyll 까지만 따라한다.&lt;h2&gt;&lt;a name=&quot;로컬에서&amp;#95;블로그&amp;#95;확인&quot;&gt;&lt;/a&gt;로컬에서 블로그 확인&lt;/h2&gt;&lt;code&gt;cd 사용자이름.github.io&lt;/code&gt;&lt;p&gt;&lt;code&gt;jekyll serve --watch&lt;/code&gt;&lt;/p&gt;&lt;p&gt;브라우저에서 &lt;code&gt;http://localhost:4000/&lt;/code&gt; 연다.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;블로그&amp;#95;첫&amp;#95;페이지&amp;#95;바꾸기&quot;&gt;&lt;/a&gt;블로그 첫 페이지 바꾸기&lt;/h2&gt;&lt;code&gt;&amp;#95;config.yml&lt;/code&gt; 파일 수정&lt;h2&gt;&lt;a name=&quot;새&amp;#95;포스트&amp;#95;추가&quot;&gt;&lt;/a&gt;새 포스트 추가&lt;/h2&gt;&lt;code&gt;&amp;#95;posts&lt;/code&gt; 디렉토리에 &lt;code&gt;YYYY-MM-DD-name-of-post.md&lt;/code&gt; 파일 만든다.&lt;p&gt;&lt;code&gt;YYYY-MM-DD-name-of-post.md&lt;/code&gt; 파일에 다음 형식으로 내용 추가&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;txt&quot;&gt;---
layout: post
title: 블라블라
---
블라블라
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;블로그&amp;#95;올리기&quot;&gt;&lt;/a&gt;블로그 올리기&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git add .
git commit -m '블라블라'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;올린&amp;#95;블로그&amp;#95;확인&quot;&gt;&lt;/a&gt;올린 블로그 확인&lt;/h2&gt;브라우저에서 &lt;code&gt;http://사용자이름&amp;#40;예:manmyung&amp;#41;.github.io&lt;/code&gt; 연다.
</description>
<pubDate>
Sun, 04 Jan 2015 00:00:00 +0900
</pubDate>
<author>
Manmyung Kim
</author>
</item>
</channel>
</rss>
